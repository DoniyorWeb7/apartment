import axios from 'axios';
import { NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

function escapeMarkdown(text: string) {
  return text.replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
}

export async function POST(req: Request) {
  console.log(req);
  try {
    if (!TELEGRAM_BOT_TOKEN || !CHAT_ID) {
      return NextResponse.json(
        { success: false, error: 'Telegram credentials not configured' },
        { status: 500 },
      );
    }

    const body = await req.json();
    const { id, price, district, adress, room, floor, floorBuild, square, images } = body;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å Markdown
    const message = `
      –°–¥–∞–µ—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥—É –∫–≤–∞—Ä—Ç–∏—Ä–∞ *\\#${id}*\n
  üìç*–†–∞–π–æ–Ω:* ${escapeMarkdown(district)}
  üì¨*–ê–¥—Ä–µ—Å:* ${escapeMarkdown(adress)}\n
  üîπ*–ö–æ–º–Ω–∞—Ç:* ${room}
  üîπ*–≠—Ç–∞–∂:* ${floor}
  üîπ*–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:* ${floorBuild}
  üîπ*–ü–ª–æ—â–∞–¥—å:* ${square} –º¬≤ \n
  üí∞*–¶–µ–Ω–∞:* ${price}\\$ \n
   @myproperty\\_uzb
    `.trim();

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é
    if (Array.isArray(images) && images.length > 0) {
      const media = images.slice(0, 10).map((url, index) => ({
        type: 'photo',
        media: url,
        // –¢–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        ...(index === 0 ? { caption: message, parse_mode: 'MarkdownV2' } : {}),
      }));

      await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMediaGroup`, {
        chat_id: CHAT_ID,
        media,
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
      await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'MarkdownV2',
      });
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Telegram API error:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 },
    );
  }
}
